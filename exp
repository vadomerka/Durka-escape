<!DOCTYPE html>
<html>
  <head>
    <meta charset=utf-8>
    <title>My first Three.js app</title>
    <style>
      body { margin: 0; }
      canvas { width: 100%; height: 100% }
      </style>
  </head>
  <body>
    <button hidden="true" onclick="alert('gotcha!');">hidden-button</button>

    <p id = "screene"></p>
    <script src="js/three.js"></script>
    <script>
      var rotx = 0;
      var roty = 0;
      ang_X = 0;
      ang_Y = 0;
      ang_Z = 0;
      var pi = 3.1415;
      var pi2 = pi * 2;
      
      var sides = [[4, 4, 4, 4], 
             [0, 1, 2, 3], 
             [5, 5, 5, 5], 
             [2, 3, 0, 1]];
      
      //отрисовка куба
      var scene = new THREE.Scene();
      var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
      camera.position.z = 2;

      var renderer = new THREE.WebGLRenderer();
      renderer.setSize( window.innerWidth, window.innerHeight);
      document.body.appendChild( renderer.domElement);
      var geometry = new THREE.BoxGeometry( 1, 1, 1 );
      const loader = new THREE.TextureLoader();
      //шесть сторон
      const materials = [
        new THREE.MeshBasicMaterial({map: loader.load('https://threejs.org/manual/examples/resources/images/flower-1.jpg')}),
        new THREE.MeshBasicMaterial({map: loader.load('https://threejs.org/manual/examples/resources/images/flower-2.jpg')}),
        new THREE.MeshBasicMaterial({map: loader.load('https://threejs.org/manual/examples/resources/images/flower-3.jpg')}),
        new THREE.MeshBasicMaterial({map: loader.load('https://threejs.org/manual/examples/resources/images/flower-4.jpg')}),
        new THREE.MeshBasicMaterial({map: loader.load('https://threejs.org/manual/examples/resources/images/flower-5.jpg')}),
        new THREE.MeshBasicMaterial({map: loader.load('https://threejs.org/manual/examples/resources/images/flower-6.jpg')}),
      ];
    const cube = new THREE.Mesh(geometry, materials);
    scene.add( cube );

    function render() {
      requestAnimationFrame( render );
      if (ang_X > 0){
        cube.rotateY(Math.PI / 2);
        ang_X -= Math.PI / 2;
      }
      if (ang_Y > 0){
        cube.rotateX(Math.PI / 2);
        ang_Y -= Math.PI / 2;
      }
      if (ang_Z > 0){
        cube.rotateZ(Math.PI / 2);
        ang_Z -= Math.PI / 2;
      }
      //cube.rotateY(angle);
      //cube.rotateZ(angle);
      renderer.render( scene, camera );
    }
      render();

    let screenLog = document.querySelector('#screene');
      document.addEventListener('mousedown', logKey);
      function logKey(e) {
        var x = e.clientX;
        var y = e.clientY;
        //full rotation = 6.28
        if (e.which == 1 && y <= 365 && y >= 265 && x >= 733 && x <= 1148){ // UP
          roty = 0.1;
          ang_Y = Math.PI / 180;
        }
        if (e.which == 1 && y <= 680 && y >= 265 && x >= 1148 && x <= 1248){ // RIGHT
          rotx = -0.1;
          ang_X = -Math.PI / 180;
        }
        if (e.which == 1 && y <= 780 && y >= 680 && x >= 733 && x <= 1148){ // DOWN
          ang_Y = -Math.PI / 180;
          roty = -0.1;
        }
        if (e.which == 1 && y <= 680 && y >= 265 && x >= 633 && x <= 733){ // LEFT
          ang_X = Math.PI / 180;
          rotx = 0.1;
        }
        //screenLog.innerText = `Client X/Y: ${sides[side_r][side_c]}`;
      }
    </script>
    <section role="None">test section</section>
  </body>
</html>
